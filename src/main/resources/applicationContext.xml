<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"

	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/cache 
     http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>


	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 基本信息 -->
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 其他配置 -->
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3"></property>
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3"></property>
		<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
			0 -->
		<property name="maxStatements" value="8"></property>
		<!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 
			0 -->
		<property name="maxStatementsPerConnection" value="5"></property>
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800"></property>
	</bean>
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:mybatis-cfg.xml"
		p:mapperLocations="classpath:mapper/*Mapper.xml" />
	<!-- 到接口所在位置自动进行扫描，自动创建实现类,并且自动注册到spring容器当中去，名字不详 -->
	<bean id="mybatisScanner"
		class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:sqlSessionFactoryBeanName="sessionFactory"
		p:basePackage="com.gl.it.dao" />

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<!-- 相当于我们自己编的切面的类 LogErr 环绕通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="reg*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="add*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="edit*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="update*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="del*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="*" read-only="true" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>


	<bean id="logadvice" class="com.gl.it.service.aop.LogAdvice" />
	<aop:config>
		<aop:advisor advice-ref="logadvice"
			pointcut="execution(public * com.gl.it.service.impl.*Impl.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(public * com.gl.it.service.impl.*Impl.*(..))" />
	</aop:config>

	<bean id="weiboservice"
		class="com.gl.it.service.impl.WeiBoServiceImpl">
		<property name="dao" ref="weiBoDao" />
	</bean>

	<bean id="userservice"
		class="com.gl.it.service.impl.UserServiceImpl">
		<property name="dao" ref="userDao" />
	</bean>
	
   <bean id="commentservice"
      class="com.gl.it.service.impl.CommentServiceImpl">
    <property name="dao" ref="commentDao" />
    </bean>
</beans>